#pragma once

/**
* @brief	: Feature Level enum.
* @bug		: No Bugs known.
**/
enum FEATURE_LEVEL {
	FEATURE_LEVEL_9_1 = 0x9100,
	FEATURE_LEVEL_9_2 = 0x9200,
	FEATURE_LEVEL_9_3 = 0x9300,
	FEATURE_LEVEL_10_0 = 0xa000,
	FEATURE_LEVEL_10_1 = 0xa100,
	FEATURE_LEVEL_11_0 = 0xb000
};

/**
* @brief	: Usage Type enum.
* @bug		: No Bugs known.
**/
enum USAGE {
	USAGE_DEFAULT,
	USAGE_INMUTABLE,
	USAGE_DYNAMIC,
	USAGE_STAGING
};

/**
* @brief	: Format Type enum.
* @bug		: No Bugs known.
**/
enum FORMAT {
	FORMAT_UNKNOWN,
	FORMAT_R32G32B32A32_TYPELESS,
	FORMAT_R32G32B32A32_FLOAT,
	FORMAT_R32G32B32A32_UINT,
	FORMAT_R32G32B32A32_SINT,
	FORMAT_R32G32B32_TYPELESS,
	FORMAT_R32G32B32_FLOAT,
	FORMAT_R32G32B32_UINT,
	FORMAT_R32G32B32_SINT,
	FORMAT_R16G16B16A16_TYPELESS,
	FORMAT_R16G16B16A16_FLOAT,
	FORMAT_R16G16B16A16_UNORM,
	FORMAT_R16G16B16A16_UINT,
	FORMAT_R16G16B16A16_SNORM,
	FORMAT_R16G16B16A16_SINT,
	FORMAT_R32G32_TYPELESS,
	FORMAT_R32G32_FLOAT,
	FORMAT_R32G32_UINT,
	FORMAT_R32G32_SINT,
	FORMAT_R32G8X24_TYPELESS,
	FORMAT_D32_FLOAT_S8X24_UINT,
	FORMAT_R32_FLOAT_X8X24_TYPELESS,
	FORMAT_X32_TYPELESS_G8X24_UINT,
	FORMAT_R10G10B10A2_TYPELESS,
	FORMAT_R10G10B10A2_UNORM,
	FORMAT_R10G10B10A2_UINT,
	FORMAT_R11G11B10_FLOAT,
	FORMAT_R8G8B8A8_TYPELESS,
	FORMAT_R8G8B8A8_UNORM,
	FORMAT_R8G8B8A8_UNORM_SRGB,
	FORMAT_R8G8B8A8_UINT,
	FORMAT_R8G8B8A8_SNORM,
	FORMAT_R8G8B8A8_SINT,
	FORMAT_R16G16_TYPELESS,
	FORMAT_R16G16_FLOAT,
	FORMAT_R16G16_UNORM,
	FORMAT_R16G16_UINT,
	FORMAT_R16G16_SNORM,
	FORMAT_R16G16_SINT,
	FORMAT_R32_TYPELESS,
	FORMAT_D32_FLOAT,
	FORMAT_R32_FLOAT,
	FORMAT_R32_UINT,
	FORMAT_R32_SINT,
	FORMAT_R24G8_TYPELESS,
	FORMAT_D24_UNORM_S8_UINT,
	FORMAT_R24_UNORM_X8_TYPELESS,
	FORMAT_X24_TYPELESS_G8_UINT,
	FORMAT_R8G8_TYPELESS,
	FORMAT_R8G8_UNORM,
	FORMAT_R8G8_UINT,
	FORMAT_R8G8_SNORM,
	FORMAT_R8G8_SINT,
	FORMAT_R16_TYPELESS,
	FORMAT_R16_FLOAT,
	FORMAT_D16_UNORM,
	FORMAT_R16_UNORM,
	FORMAT_R16_UINT,
	FORMAT_R16_SNORM,
	FORMAT_R16_SINT,
	FORMAT_R8_TYPELESS,
	FORMAT_R8_UNORM,
	FORMAT_R8_UINT,
	FORMAT_R8_SNORM,
	FORMAT_R8_SINT,
	FORMAT_A8_UNORM,
	FORMAT_R1_UNORM,
	FORMAT_R9G9B9E5_SHAREDEXP,
	FORMAT_R8G8_B8G8_UNORM,
	FORMAT_G8R8_G8B8_UNORM,
	FORMAT_BC1_TYPELESS,
	FORMAT_BC1_UNORM,
	FORMAT_BC1_UNORM_SRGB,
	FORMAT_BC2_TYPELESS,
	FORMAT_BC2_UNORM,
	FORMAT_BC2_UNORM_SRGB,
	FORMAT_BC3_TYPELESS,
	FORMAT_BC3_UNORM,
	FORMAT_BC3_UNORM_SRGB,
	FORMAT_BC4_TYPELESS,
	FORMAT_BC4_UNORM,
	FORMAT_BC4_SNORM,
	FORMAT_BC5_TYPELESS,
	FORMAT_BC5_UNORM,
	FORMAT_BC5_SNORM,
	FORMAT_B5G6R5_UNORM,
	FORMAT_B5G5R5A1_UNORM,
	FORMAT_B8G8R8A8_UNORM,
	FORMAT_B8G8R8X8_UNORM,
	FORMAT_R10G10B10_XR_BIAS_A2_UNORM,
	FORMAT_B8G8R8A8_TYPELESS,
	FORMAT_B8G8R8A8_UNORM_SRGB,
	FORMAT_B8G8R8X8_TYPELESS,
	FORMAT_B8G8R8X8_UNORM_SRGB,
	FORMAT_BC6H_TYPELESS,
	FORMAT_BC6H_UF16,
	FORMAT_BC6H_SF16,
	FORMAT_BC7_TYPELESS,
	FORMAT_BC7_UNORM,
	FORMAT_BC7_UNORM_SRGB,
	FORMAT_FORCE_UINT
};

/**
* @brief	: Texture 1D DSV Desc.
* @bug		: No Bugs known.
**/
struct TEX1D_DSV {
	unsigned int mipSlice;
};

/**
* @brief	: Texture 1D Array DSV Desc.
* @bug		: No Bugs known.
**/
struct TEX1D_ARRAY_DSV {
	unsigned int mipSlice;
	unsigned int firstArraySlice;
	unsigned int arraySize;
};

/**
* @brief	: Texture 2D DSV Desc.
* @bug		: No Bugs known.
**/
struct TEX2D_DSV {
	unsigned int mipSlice;
};

/**
* @brief	: Texture 2D Array DSV Desc.
* @bug		: No Bugs known.
**/
struct TEX2D_ARRAY_DSV {
	unsigned int mipSlice;
	unsigned int firstArraySlice;
	unsigned int arraySize;
};

/**
* @brief	: Texture 2D DMS DSV Desc.
* @bug		: No Bugs known.
**/
struct TEX2DMS_DSV {
	unsigned int unusedField_NothingToDefine;
};

/**
* @brief	: Texture 2D DMS Array DSV Desc.
* @bug		: No Bugs known.
**/
struct TEX2DMS_ARRAY_DSV {
	unsigned int firstArraySize;
	unsigned int arraySize;
};

/**
* @brief	: Sample Desc.
* @bug		: No Bugs known.
**/
struct SAMPLEDESC {
	unsigned int count;
	unsigned int quality;
};

/**
* @brief	: RTV Dimmension enum.
* @bug		: No Bugs known.
**/
enum RTV_DIMENSION {
	RTV_DIMENSION_UNKNOWN = 0,
	RTV_DIMENSION_BUFFER = 1,
	RTV_DIMENSION_TEXTURE1D = 2,
	RTV_DIMENSION_TEXTURE1DARRAY = 3,
	RTV_DIMENSION_TEXTURE2D = 4,
	RTV_DIMENSION_TEXTURE2DARRAY = 5,
	RTV_DIMENSION_TEXTURE2DMS = 6,
	RTV_DIMENSION_TEXTURE2DMSARRAY = 7,
	RTV_DIMENSION_TEXTURE3D = 8
};

/**
* @brief	: DSV Dimension enum.
* @bug		: No Bugs known.
**/
enum DSV_DIMENSION {
	DSV_DIMENSION_UNKNOWN = 0,
	DSV_DIMENSION_TEXTURE1D = 1,
	DSV_DIMENSION_TEXTURE1DARRAY = 2,
	DSV_DIMENSION_TEXTURE2D = 3,
	DSV_DIMENSION_TEXTURE2DARRAY = 4,
	DSV_DIMENSION_TEXTURE2DMS = 5,
	DSV_DIMENSION_TEXTURE2DMSARRAY = 6
};

/**
* @brief	: Buffer RTV Desc.
* @bug		: No Bugs known.
**/
struct BUFFER_RTV {
	union {
		unsigned int firstElement;
		unsigned int elementOffset;
	};
	union {
		unsigned int numElements;
		unsigned int elementWidth;
	};
};

/**
* @brief	: Texture 1D RTV Desc.
* @bug		: No Bugs known.
**/
struct TEX1D_RTV {
	unsigned int mipSlice;
};

/**
* @brief	: Driver Type enum.
* @bug		: No Bugs known.
**/
enum DRIVER_TYPE {
	DRIVER_TYPE_UNKNOWN = 0,
	DRIVER_TYPE_HARDWARE = (DRIVER_TYPE_UNKNOWN + 1),
	DRIVER_TYPE_REFERENCE = (DRIVER_TYPE_HARDWARE + 1),
	DRIVER_TYPE_NULL = (DRIVER_TYPE_REFERENCE + 1),
	DRIVER_TYPE_SOFTWARE = (DRIVER_TYPE_NULL + 1),
	DRIVER_TYPE_WARP = (DRIVER_TYPE_SOFTWARE + 1)
};


/**
* @brief	: Texture 1D Array RTV Desc.
* @bug		: No Bugs known.
**/
struct TEX1D_ARRAY_RTV {
	unsigned int mipSlice;
	unsigned int firstArraySlice;
	unsigned int arraySize;
};

/**
* @brief	: Texture 2D RTV Desc.
* @bug		: No Bugs known.
**/
struct TEX2D_RTV {
	unsigned int mipSlice;
};

/**
* @brief	: Texture 2D Array RTV Desc.
* @bug		: No Bugs known.
**/
struct TEX2D_ARRAY_RTV {
	unsigned int mipSlice;
	unsigned int firstArraySlice;
	unsigned int arraySize;
};

/**
* @brief	: Texture 2DMS RTV Desc.
* @bug		: No Bugs known.
**/
struct TEX2DMS_RTV {
	unsigned int unusedField_NothingToDefine;
};

/**
* @brief	: Texture 2DMS Array RTV Desc.
* @bug		: No Bugs known.
**/
struct TEX2DMS_ARRAY_RTV {
	unsigned int firstArraySlice;
	unsigned int arraySize;
};

/**
* @brief	: Texture 3D RTV Desc.
* @bug		: No Bugs known.
**/
struct TEX3D_RTV {
	unsigned int mipSlice;
	unsigned int firstWSlice;
	unsigned int wSize;
};

/**
* @brief	: Filter Type enum.
* @bug		: No Bugs known.
**/
enum FILTER {
	FILTER_MIN_MAG_MIP_POINT = 0,
	FILTER_MIN_MAG_POINT_MIP_LINEAR = 0x1,
	FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x4,
	FILTER_MIN_POINT_MAG_MIP_LINEAR = 0x5,
	FILTER_MIN_LINEAR_MAG_MIP_POINT = 0x10,
	FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x11,
	FILTER_MIN_MAG_LINEAR_MIP_POINT = 0x14,
	FILTER_MIN_MAG_MIP_LINEAR = 0x15,
	FILTER_ANISOTROPIC = 0x55,
	FILTER_COMPARISON_MIN_MAG_MIP_POINT = 0x80,
	FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 0x81,
	FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x84,
	FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 0x85,
	FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 0x90,
	FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x91,
	FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 0x94,
	FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 0x95,
	FILTER_COMPARISON_ANISOTROPIC = 0xd5
};

/**
* @brief	: Texture Addrress enum.
* @bug		: No Bugs known.
**/
enum TEXTURE_ADDRESS_MODE {
	TEXTURE_ADDRESS_WRAP = 1,
	TEXTURE_ADDRESS_MIRROR = 2,
	TEXTURE_ADDRESS_CLAMP = 3,
	TEXTURE_ADDRESS_BORDER = 4,
	TEXTURE_ADDRESS_MIRROR_ONCE = 5
};

/**
* @brief	: Comparison Functions enum.
* @bug		: No Bugs known.
**/
enum COMPARISON_FUNC {
	COMPARISON_NEVER = 1,
	COMPARISON_LESS = 2,
	COMPARISON_EQUAL = 3,
	COMPARISON_LESS_EQUAL = 4,
	COMPARISON_GREATER = 5,
	COMPARISON_NOT_EQUAL = 6,
	COMPARISON_GREATER_EQUAL = 7,
	COMPARISON_ALWAYS = 8
};


/**
* @brief	: Device Desc.
* @bug		: No Bugs known.
**/
struct DeviceDesc {
	DeviceDesc::DeviceDesc() {
		DriverType = DRIVER_TYPE_UNKNOWN;
		DriverTypes[0] = DRIVER_TYPE_UNKNOWN;
		DriverTypes[1] = DRIVER_TYPE_UNKNOWN;
		DriverTypes[2] = DRIVER_TYPE_UNKNOWN;
		DeviceFlags = 0;
		FeatureLevels[0] = FEATURE_LEVEL_9_1;
		FeatureLevels[1] = FEATURE_LEVEL_9_1;
		FeatureLevels[2] = FEATURE_LEVEL_9_1;
		numFeatureLevels = 0;
	}
	DRIVER_TYPE		DriverType;
	DRIVER_TYPE		DriverTypes[3];
	unsigned int	DeviceFlags;
	FEATURE_LEVEL	FeatureLevels[3];
	unsigned int	numFeatureLevels;
};

/**
* @brief	: Description of the Sampler.
* @bug		: No Bugs known.
**/
struct SamplerDesc {
	FILTER filter;
	TEXTURE_ADDRESS_MODE addresU;
	TEXTURE_ADDRESS_MODE addresV;
	TEXTURE_ADDRESS_MODE addresW;
	float mipLODBias;
	unsigned int maxAnisotropy;
	COMPARISON_FUNC comparisonFunc;
	float borderColor[4];
	float minLOD;
	float maxLOD;
};

/**
* @brief	: Description for a ViewPort.
* @bug		: No Bugs known.
**/
struct ViewPortDesc {
	float topLeftX;
	float topLeftY;
	float W;
	float H;
	float minDepth;
	float maxDepth;
};


enum PRIMITIVE_TOPOLOGY {
	PRIMITIVE_TOPOLOGY_UNDEFINED = 0,
	PRIMITIVE_TOPOLOGY_POINTLIST = 1,
	PRIMITIVE_TOPOLOGY_LINELIST = 2,
	PRIMITIVE_TOPOLOGY_LINESTRIP = 3,
	PRIMITIVE_TOPOLOGY_TRIANGLELIST = 4,
	PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = 5,
	PRIMITIVE_TOPOLOGY_LINELIST_ADJ = 10,
	PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = 11,
	PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = 12,
	PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = 13,
	PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST = 33,
	PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST = 34,
	PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST = 35,
	PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST = 36,
	PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST = 37,
	PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST = 38,
	PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST = 39,
	PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST = 40,
	PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST = 41,
	PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST = 42,
	PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST = 43,
	PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST = 44,
	PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST = 45,
	PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST = 46,
	PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST = 47,
	PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST = 48,
	PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST = 49,
	PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST = 50,
	PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST = 51,
	PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST = 52,
	PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST = 53,
	PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST = 54,
	PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST = 55,
	PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST = 56,
	PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST = 57,
	PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST = 58,
	PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST = 59,
	PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST = 60,
	PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST = 61,
	PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST = 62,
	PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST = 63,
	PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST = 64
};
